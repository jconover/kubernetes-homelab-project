name: Node.js Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/nodejs-service/**'
      - '.github/workflows/nodejs-service.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/nodejs-service/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jconover/kubernetes-homelab-nodejs-service

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/nodejs-service
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/nodejs-service/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: |
        # Create a simple test file if it doesn't exist
        if [ ! -f test/server.test.js ]; then
          mkdir -p test
          cat > test/server.test.js << 'EOF'
        const request = require('supertest');
        const app = require('../server');
        
        describe('Server', () => {
          test('GET / should return 200', async () => {
            const response = await request(app).get('/');
            expect(response.status).toBe(200);
            expect(response.body.message).toBeDefined();
          });
        
          test('GET /health should return 200', async () => {
            const response = await request(app).get('/health');
            expect(response.status).toBe(200);
            expect(response.body.status).toBeDefined();
          });
        
          test('GET /metrics should return 200', async () => {
            const response = await request(app).get('/metrics');
            expect(response.status).toBe(200);
          });
        });
        EOF
        fi
        npm test
    
    - name: Lint code
      run: |
        npm install -g eslint
        npx eslint . --ext .js || true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/nodejs-service
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Update image tag in manifests
      run: |
        # Update the image tag in the deployment manifest
        sed -i "s|image: ghcr.io/jconover/kubernetes-homelab-nodejs-service:.*|image: ghcr.io/jconover/kubernetes-homelab-nodejs-service:main-$(echo $GITHUB_SHA | cut -c1-7)|g" manifests/apps/nodejs-service/deployment.yaml
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add manifests/apps/nodejs-service/deployment.yaml
        git commit -m "Update Node.js service image tag to main-$(echo $GITHUB_SHA | cut -c1-7)" || exit 0
        git push
    
    - name: Sync ArgoCD application
      run: |
        echo "ArgoCD will automatically sync the application based on the updated manifest"
